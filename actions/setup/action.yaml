name: Setup Flux
description: A GitHub Action for installing the Flux CLI for distribution versions
author: Stefan Prodan
branding:
  color: blue
  icon: command
inputs:
  version:
    description: Distribution version e.g. v2.6.0 (defaults to latest stable release)
    required: false
  bindir:
    description: Alternative location for the Flux CLI, defaults to path relative to $RUNNER_TOOL_CACHE.
    required: false
  distribution-url:
    description: Distribution images info URL
    default: https://raw.githubusercontent.com/controlplaneio-fluxcd/distribution/main/images
    required: false
outputs:
  version:
    description: Flux version
    value: ${{ steps.cli.outputs.version }}
runs:
  using: composite
  steps:
    - name: Download the Flux CLI binary to the runner's cache dir
      id: cli
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
        DISTRIBUTION_URL: ${{ inputs.distribution-url }}
        BIN_DIR: ${{ inputs.bindir }}
      run: |
        if [[ -z "$VERSION" ]] || [[ "$VERSION" = "latest" ]]; then
          VERSION=$(curl -fsSL ${DISTRIBUTION_URL}/VERSION | head -n1)
        fi
        if [[ -z "$VERSION" ]]; then
          echo "Unable to determine the latest distribution version"
          exit 1
        fi
        if [[ $VERSION = v* ]]; then
          VERSION="${VERSION:1}"
        fi

        OS=$(echo "${RUNNER_OS}" | tr '[:upper:]' '[:lower:]')
        if [[ "$OS" == "macos" ]]; then
          OS="darwin"
        fi

        ARCH=$(echo "${RUNNER_ARCH}" | tr '[:upper:]' '[:lower:]')
        if [[ "$ARCH" == "x64" ]]; then
          ARCH="amd64"
        elif [[ "$ARCH" == "x86" ]]; then
          ARCH="386"
        fi

        FLUX_EXEC_FILE="flux"
        if [[ "$OS" == "windows" ]]; then
            FLUX_EXEC_FILE="${FLUX_EXEC_FILE}.exe"
        fi

        FLUX_TOOL_DIR=$BIN_DIR
        if [[ -z "$FLUX_TOOL_DIR" ]]; then
          FLUX_TOOL_DIR="${RUNNER_TOOL_CACHE}/flux2/${VERSION}/${OS}/${ARCH}"
        fi
        if [[ ! -x "$FLUX_TOOL_DIR/FLUX_EXEC_FILE" ]]; then
          DL_DIR="$(mktemp -dt flux2-XXXXXX)"
          trap 'rm -rf $DL_DIR' EXIT

          echo "Downloading flux ${VERSION} for ${OS}/${ARCH}"
          FLUX_TARGET_FILE="flux_${VERSION}_${OS}_${ARCH}.tar.gz"
          if [[ "$OS" == "windows" ]]; then
            FLUX_TARGET_FILE="flux_${VERSION}_${OS}_${ARCH}.zip"
          fi

          FLUX_CHECKSUMS_FILE="flux_${VERSION}_checksums.txt"

          FLUX_DOWNLOAD_URL="https://github.com/fluxcd/flux2/releases/download/v${VERSION}/"

          curl -fsSL -o "$DL_DIR/$FLUX_TARGET_FILE" "$FLUX_DOWNLOAD_URL/$FLUX_TARGET_FILE"
          curl -fsSL -o "$DL_DIR/$FLUX_CHECKSUMS_FILE" "$FLUX_DOWNLOAD_URL/$FLUX_CHECKSUMS_FILE"

          echo "Verifying checksum"
          sum=""
          if command -v openssl > /dev/null; then
            sum=$(openssl sha256 "$DL_DIR/$FLUX_TARGET_FILE" | awk '{print $2}')
          elif command -v sha256sum > /dev/null; then
            sum=$(sha256sum "$DL_DIR/$FLUX_TARGET_FILE" | awk '{print $1}')
          fi

          if [[ -z "$sum" ]]; then
            echo "Neither openssl nor sha256sum found. Cannot calculate checksum."
            exit 1
          fi

          expected_sum=$(grep " $FLUX_TARGET_FILE\$" "$DL_DIR/$FLUX_CHECKSUMS_FILE" | awk '{print $1}')
          if [ "$sum" != "$expected_sum" ]; then
            echo "SHA sum of ${FLUX_TARGET_FILE} does not match. Aborting."
            exit 1
          fi

          echo "Installing flux to ${FLUX_TOOL_DIR}"
          mkdir -p "$FLUX_TOOL_DIR"
        
          if [[ "$OS" == "windows" ]]; then
            unzip "$DL_DIR/$FLUX_TARGET_FILE" "$FLUX_EXEC_FILE" -d "$FLUX_TOOL_DIR"
          else
            tar xzf "$DL_DIR/$FLUX_TARGET_FILE" -C "$FLUX_TOOL_DIR" $FLUX_EXEC_FILE
          fi

          chmod +x "$FLUX_TOOL_DIR/$FLUX_EXEC_FILE"
        fi

        echo "Adding flux to path"
        echo "$FLUX_TOOL_DIR" >> "$GITHUB_PATH"
        echo "version=v${VERSION}" >> "$GITHUB_OUTPUT"
